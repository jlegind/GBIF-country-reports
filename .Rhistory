bymonth <- mycsv[mycsv[,1]==j, ]
plt <- ggplot(bymonth, aes(x = `year_month`, y = as.integer(sum), group = iso_code)) +
geom_area(position = "identity", colour="black", fill="blue", alpha=0.2) +
geom_line(size = 1.5, colour="blue", alpha=0.6)
#The code below generates a custom x axis tick mark label based on Year/Week
#plt <- plt + scale_x_discrete(breaks = c("201440", "201503", "201516"), labels=c("September 2014", "Januar 2015", "April 2015")) +
#   theme(axis.title.x = element_blank(), axis.title.y = element_text(face="bold", size = 16))
ggsave(plt, file=paste("downloaded_records_by_month_for_", j, ".png", sep=""), path="g:/Country reports aux/test_ggsave2")
}
require(scales)
?scale_y_continuous
for (j in unique(mycsv$iso_code)){
bymonth <- mycsv[mycsv[,1]==j, ]
plt <- ggplot(bymonth, aes(x = `year_month`, y = as.integer(sum)/1000, group = iso_code)) +
geom_area(position = "identity", colour="black", fill="blue", alpha=0.2) +
geom_line(size = 1.5, colour="blue", alpha=0.6) +
scale_y_c
#The code below generates a custom x axis tick mark label based on Year/Week
#plt <- plt + scale_x_discrete(breaks = c("201440", "201503", "201516"), labels=c("September 2014", "Januar 2015", "April 2015")) +
#   theme(axis.title.x = element_blank(), axis.title.y = element_text(face="bold", size = 16))
ggsave(plt, file=paste("downloaded_records_by_month_for_", j, ".png", sep=""), path="g:/Country reports aux/test_ggsave2")
}
for (j in unique(mycsv$iso_code)){
bymonth <- mycsv[mycsv[,1]==j, ]
plt <- ggplot(bymonth, aes(x = `year_month`, y = as.integer(sum)/1000, group = iso_code)) +
geom_area(position = "identity", colour="black", fill="blue", alpha=0.2) +
geom_line(size = 1.5, colour="blue", alpha=0.6) +
scale_y_c
#The code below generates a custom x axis tick mark label based on Year/Week
#plt <- plt + scale_x_discrete(breaks = c("201440", "201503", "201516"), labels=c("September 2014", "Januar 2015", "April 2015")) +
#   theme(axis.title.x = element_blank(), axis.title.y = element_text(face="bold", size = 16))
ggsave(plt, file=paste("downloaded_records_by_month_for_", j, ".png", sep=""), path="g:/Country reports aux/test_ggsave2")
}
for (j in unique(mycsv$iso_code)){
bymonth <- mycsv[mycsv[,1]==j, ]
plt <- ggplot(bymonth, aes(x = `year_month`, y = as.integer(sum)/1000, group = iso_code)) +
geom_area(position = "identity", colour="black", fill="blue", alpha=0.2) +
geom_line(size = 1.5, colour="blue", alpha=0.6) +
#The code below generates a custom x axis tick mark label based on Year/Week
#plt <- plt + scale_x_discrete(breaks = c("201440", "201503", "201516"), labels=c("September 2014", "Januar 2015", "April 2015")) +
#   theme(axis.title.x = element_blank(), axis.title.y = element_text(face="bold", size = 16))
ggsave(plt, file=paste("downloaded_records_by_month_for_", j, ".png", sep=""), path="g:/Country reports aux/test_ggsave2")
}
for (j in unique(mycsv$iso_code)){
bymonth <- mycsv[mycsv[,1]==j, ]
plt <- ggplot(bymonth, aes(x = `year_month`, y = as.integer(sum)/1000, group = iso_code)) +
geom_area(position = "identity", colour="black", fill="blue", alpha=0.2) +
geom_line(size = 1.5, colour="blue", alpha=0.6) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#The code below generates a custom x axis tick mark label based on Year/Week
#plt <- plt + scale_x_discrete(breaks = c("201440", "201503", "201516"), labels=c("September 2014", "Januar 2015", "April 2015")) +
#   theme(axis.title.x = element_blank(), axis.title.y = element_text(face="bold", size = 16))
ggsave(plt, file=paste("downloaded_records_by_month_for_", j, ".png", sep=""), path="g:/Country reports aux/test_ggsave2")
}
source('~/.active-rstudio-document')
?ggplot
for (j in unique(mycsv$iso_code)){
bymonth <- mycsv[mycsv[,1]==j, ]
plt <- ggplot(bymonth, aes(x = `year_month`, y = as.integer(sum)/1000, group = iso_code)) +
geom_area(position = "identity", colour="black", fill="blue", alpha=0.2) +
geom_line(size = 1.5, colour="blue", alpha=0.6) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(name="Records downloaded (in thousands)") +
scale_x_discrete(name="")
ggsave(plt, file=paste("downloaded_records_by_month_for_", j, ".png", sep=""), path="g:/Country reports aux/test_ggsave2")
}
topp <- read.csv("../Page7_top_contrib_for_R.csv", na.strings="")
enfor <- data.frame(country=character(), rank=integer(), stringsAsFactors = FALSE)
for (j in 1:8){
for (k in iso_country$iso_code){
#print(c(k, j))
enfor[nrow(enfor)+1, ] <- c(k, j)
}
}
enforcer <- data.frame(country=character(), rank=integer(), stringsAsFactors = FALSE)
for (j in 1:8){
for (k in iso_country$iso_code){
#print(c(k, j))
enforcer[nrow(enfor)+1, ] <- c(k, j)
}
}
head(enforcer, 16)
enforcer <- data.frame(country=character(), rank=integer(), stringsAsFactors = FALSE)
for (j in 1:8){
for (k in iso_country$iso_code){
#print(c(k, j))
enforcer[nrow(enforcer)+1, ] <- c(k, j)
}
}
head(enforcer, 16)
tail(enforcer, 16)
enforcer$rank = as.integer(enforcer$rank)
top_contributors <- data.frame(lapply(left_join(enforcer, topp,by=c('country'='country', 'rank'='rank')), as.character), stringsAsFactors = FALSE)
top_contributors[is.na(top_contributors)] <- ""
head(top_contributors)
?order
top_c
head(top_contributors[,order(top_contributors$country)])
head(top_contributors[order(top_contributors$country),])
head(top_contributors[order(top_contributors$country),])
topp <- read.csv("../Page7_top_contrib_for_R.csv", na.strings="", encoding="UTF-8")
enforcer <- data.frame(country=character(), rank=integer(), stringsAsFactors = FALSE)
for (j in 1:8){
for (k in iso_country$iso_code){
#print(c(k, j))
enforcer[nrow(enforcer)+1, ] <- c(k, j)
}
}
enforcer$rank = as.integer(enforcer$rank)
for (j in 1:8){
for (k in iso_country$iso_code){
#print(c(k, j))
enforcer[nrow(enforcer)+1, ] <- c(k, j)
}
}
enforcer$rank = as.integer(enforcer$rank)
top_contributors <- data.frame(lapply(left_join(enforcer, topp,by=c('country'='country', 'rank'='rank')), as.character), stringsAsFactors = FALSE)
top_contributors[is.na(top_contributors)] <- ""
head(top_contributors[order(top_contributors$country),])
top_contributors <- data.frame(lapply(left_join(enforcer, topp,by=c('country'='country', 'rank'='rank')), as.character), stringsAsFactors = FALSE)
head(top_contributors, 100)
head(top_contributors[, c(1,2)])
head(top_contributors[, c(1,2)], 100)
head(top_contributors[order(top_contributors$country),c(1,2)])
head(top_contributors[order(top_contributors$country),c(1,2)],100)
enforcer <- data.frame(country=character(), rank=integer(), stringsAsFactors = FALSE)
for (j in 1:8){
for (k in iso_country$iso_code){
#print(c(k, j))
enforcer[nrow(enforcer)+1, ] <- c(k, j)
}
}
enforcer$rank = as.integer(enforcer$rank)
top_contributors <- data.frame(lapply(left_join(enforcer, topp,by=c('country'='country', 'rank'='rank')), as.character), stringsAsFactors = FALSE)
top_contributors[is.na(top_contributors)] <- ""
head(top_contributors[order(top_contributors$country),c(1,2)],100)
df_top10_contributing<-data.frame(countries)
fct<-as.character(unique(top_contributors$rank))
countries<-as.character(unique(top_contributors$country))
for (j in fct){
newdf<-top_contributors[top_contributors$rank==j, c('country','count')]
for (k in colnames(newdf)){
#print(k)
#print(head(newdf[,k]))
df_top10_contributing[,paste(k,j, sep="")]<-newdf[,k]
}
}
head(df_top10_contributing)
df_top10_contributing<-data.frame(countries)
for (j in fct){
newdf<-top_contributors[top_contributors$rank==j, c('country', 'title','count')]
for (k in colnames(newdf)){
#print(k)
#print(head(newdf[,k]))
df_top10_contributing[,paste(k,j, sep="")]<-newdf[,k]
}
}
head(df_top10_contributing)
df_top10_contributing<-data.frame(countries)
for (j in fct){
newdf<-top_contributors[top_contributors$rank==j, c('title','count')]
for (k in colnames(newdf)){
#print(k)
#print(head(newdf[,k]))
df_top10_contributing[,paste(k,j, sep="")]<-newdf[,k]
}
}
head(df_top10_contributing)
df_top10_contributing<-data.frame(countries)
for (j in fct){
newdf<-top_contributors[top_contributors$rank==j+"rank", c('title','count')]
for (k in colnames(newdf)){
#print(k)
#print(head(newdf[,k]))
df_top10_contributing[,paste(k,j, sep="")]<-newdf[,k]
}
}
df_top10_contributing<-data.frame(countries)
for (j in fct){
newdf<-top_contributors[top_contributors$rank==as.character(j)+"rank", c('title','count')]
for (k in colnames(newdf)){
#print(k)
#print(head(newdf[,k]))
df_top10_contributing[,paste(k,j, sep="")]<-newdf[,k]
}
}
df_top10_contributing<-data.frame(countries)
for (j in fct){
newdf<-top_contributors[top_contributors$rank==paste0(j,"rank"), c('title','count')]
for (k in colnames(newdf)){
#print(k)
#print(head(newdf[,k]))
df_top10_contributing[,paste(k,j, sep="")]<-newdf[,k]
}
}
head(df_top10_contributing)
df_top10_contributing<-data.frame(countries)
for (j in fct){
newdf<-top_contributors[top_contributors$rank==j, c('title','count')]
for (k in colnames(newdf)){
#print(k)
#print(head(newdf[,k]))
df_top10_contributing[,paste(k,j, sep="")]<-newdf[,k]
}
}
head(df_top10_contributing)
df_top10_contributing<-data.frame(countries)
for (j in fct){
newdf<-top_contributors[top_contributors$rank==j, c('title','count')]
for (k in colnames(newdf)){
#print(k)
#print(head(newdf[,k]))
df_top10_contributing[,paste(k, "rank",j , sep="_")]<-newdf[,k]
}
}
df_top10_contributing<-data.frame(countries)
for (j in fct){
newdf<-top_contributors[top_contributors$rank==j, c('title','count')]
for (k in colnames(newdf)){
#print(k)
#print(head(newdf[,k]))
df_top10_contributing[,paste(k, "rank",j , sep="_")]<-newdf[,k]
}
}
head(df_top10_contributing)
View(df_phylum)
iso_country <- read.csv("country_iso_GBIF.csv", encoding="UTF-8", na.strings="NAN")
iso_country[] <- lapply(iso_country, as.character)
source('C:/Users/jlegind/Dropbox/country reports/GBIF-country-reports/r_taxon_matrix_phylum.R')
head(df_phylum)
source('~/.active-rstudio-document')
head(df_phylum)
#Makes the file for the phylum ranks in the taxon matrix - see comments to the r_taxon_matrix script
library(dplyr)
mycsv<-read.csv("../phylum_matrix.csv", na.strings="NAN", encoding="UTF-8")
enforcer <- data.frame(country=character(), taxon=character(),stringsAsFactors = FALSE)
for (j in iso_country[,1]){
for (k in unique(mycsv[,2])){
enforcer[nrow(enforcer)+1, ] <- c(j, k)
}
}
#left_join from the dplyr package is used to join enforcer and mycsv. lapply and the as.character function coerces factors to char
combo <- data.frame(lapply(left_join(enforcer, mycsv, by=c('taxon'='jan.phylum_matrix.phylum', 'iso_code'='jan.phylum_matrix.country')), as.character), stringsAsFactors = F)
#converts NAs to 0
combo[is.na(combo)] <- 0
head(combo)
df_phylum <- data.frame(iso_country$iso_code)
df_phylum
fct <- as.character(unique(combo$taxon))
df_phylum <- data.frame(iso_country$iso_code)
for (j in fct){
#each element in fct gets a new dataframe that is then pasted onto df
newdf <- combo[combo$taxon == j, c('jan.phylum_matrix.total','jan.phylum_matrix.increase')]
for (k in colnames(newdf)){
df_phylum[,paste(k,j, sep="")]<-newdf[,k]
}
}
head(df_phylum)
mycsv<-read.csv("../class_matrix.csv", na.strings="NAN")
enforcer <- data.frame(country=character(), taxon=character(),stringsAsFactors = FALSE)
for (j in iso_country[,1]){
for (k in unique(mycsv[,2])){
enforcer[nrow(enforcer)+1, ] <- c(j, k)
}
}
combo <- left_join(enforcer, mycsv, by=c('taxon'='jan.class_matrix.class_', 'country'='jan.class_matrix.country'),type="left")
combo <- data.frame(lapply(combo, as.character), stringsAsFactors = FALSE)
combo[is.na(combo)] <- 0
fct <- as.character(unique(combo[,2]))
df_class <- data.frame(iso_country$iso_code)
head(combo)
for (j in fct){
newdf <- combo[combo$taxon == j, c('jan.class_matrix._c2','jan.class_matrix.increase')]
for (k in colnames(newdf)){
df_class[,paste(k,j, sep="")] <- newdf[,k]
}
}
head(df_class)
source('C:/Users/jlegind/Dropbox/country reports/GBIF-country-reports/r_taxon_matrix_kingdom.R')
head(df_kingdom)
head(combo)
source('C:/Users/jlegind/Dropbox/country reports/GBIF-country-reports/r_taxon_matrix_kingdom.R')
head(df_kingdom)
install.packages("rgbif")
install.packages("rgbif")
library(rgbif)
library("rgbif")
?datasets
install.packages('httr')
install.packages("httr")
library("rgbif")
?dataset_metrics
dataset_metrics(uuid='90302970-1bc6-4865-be76-9aef1dd707f9')
library("httr")
dataset_metrics(uuid='90302970-1bc6-4865-be76-9aef1dd707f9')
dataset_metrics(uuid='90302970-1bc6-4865-be76-9aef1dd707f9', config=verbose())
dataset_metrics(uuid='66dd0960-2d7d-46ee-a491-87b9adcfe7b1', config=verbose())
dataset_metrics(uuid='50c9509d-22c7-4a22-a47d-8c48425ef4a7', config=verbose())
occ_count(datasetKey='50c9509d-22c7-4a22-a47d-8c48425ef4a7')
enforcer <- data.frame(country=character(), taxon=character(),stringsAsFactors = FALSE)
mycsv <- read.csv("../Page6_most_recent_datasets_from.csv")
mycsv <- read.csv("../Page6_most_recent_datasets_from.csv")
head(mycsv)
?read.csv
mycsv <- read.csv("../Page6_most_recent_datasets_from.csv", sep=";")
head(mycsv)
head(mycsv[,2])
mycsv <- read.csv("../Page6_most_recent_datasets_from.csv", sep=";", encoding="UTF-8")
head(mycsv[,2])
combo <- data.frame(lapply(left_join(iso_country, mycsv, by=c('iso_code'='country'), as.character), stringsAsFactors = F)
combo <- data.frame(lapply(left_join(iso_country, mycsv, by=c('iso_code'='country'), as.character), stringsAsFactors = F))
combo <- data.frame(lapply(left_join(iso_country, mycsv, by=c('iso_code'='country'), as.character), stringsAsFactors = F))
combo <- data.frame(lapply(left_join(iso_country, mycsv, by=c('iso_code'='country')), as.character), stringsAsFactors = F)
library(dplyr)
combo <- data.frame(lapply(left_join(iso_country, mycsv, by=c('iso_code'='country')), as.character), stringsAsFactors = F)
combo[is.na(combo)] <- 0
head(combo)
head(combo,12)
#left_join from the dplyr package is used to join enforcer and mycsv. lapply and the as.character function coerces factors to char
combo <- data.frame(lapply(left_join(iso_country, mycsv, by=c('iso_code'='country')), as.character), stringsAsFactors = F)
#converts NAs to 0
combo[is.na(combo)] <- ""
head(combo,12)
head(combo$type,12)
head(combo$type,24)
head(combo[,combo$type],24)
head(combo[combo$type,],24)
head(combo[,combo$type],24)
head(combo[,3],24)
head(combo[,4],24)
mycsv <- read.csv("../Page6_most_recent_datasets_from.csv", sep=";", encoding="UTF-8")
#left_join from the dplyr package is used to join enforcer and mycsv. lapply and the as.character function coerces factors to char
combo <- data.frame(lapply(left_join(iso_country, mycsv, by=c('iso_code'='country')), as.character), stringsAsFactors = F)
#converts NAs to 0
combo[is.na(combo)] <- ""
dataset_count <- vector
df <- data.frame(count=integer())
for (j in combo$key){
append(dataset_count, occ_count(datasetKey = "j"))
#each element in fct gets a new dataframe that is then pasted onto df
#newdf <- combo[combo$taxon == j, c('kingdom_matrix._c2','kingdom_matrix.increase')]
#for (k in colnames(newdf)){
#   df_kingdom[,paste(k,j, sep="")]<-newdf[,k]
#}
}
dataset_count
head(mycsv)
combo <- data.frame(lapply(left_join(iso_country, mycsv, by=c('iso_code'='country')), as.character), stringsAsFactors = F)
#converts NAs to 0
combo[is.na(combo)] <- ""
mycsv <- read.csv("../Page6_most_recent_datasets_from.csv", sep=";", encoding="UTF-8")
combo <- data.frame(lapply(left_join(iso_country, mycsv, by=c('iso_code'='country')), as.character), stringsAsFactors = F)
View(df_class)
rm(df_class, df_kingdom, df_phylum)
head(combo)
nrow(combo)
tail(combo)
tail(combo,30)
tail(combo[,1],30)
combo[is.na(combo)] <- ""
tail(combo$key,30)
dataset_count <- vector
df <- data.frame(count=integer())
for (j in combo$key){
if (combo$key == ""){
append(dataset_count, "")
}else{
append(dataset_count, occ_count(datasetKey = "j"))
}
#each element in fct gets a new dataframe that is then pasted onto df
#newdf <- combo[combo$taxon == j, c('kingdom_matrix._c2','kingdom_matrix.increase')]
#for (k in colnames(newdf)){
#   df_kingdom[,paste(k,j, sep="")]<-newdf[,k]
#}
}
dataset_count
dataset_count <- vector()
for (j in combo$key){
if (combo$key == ""){
append(dataset_count, "")
}else{
append(dataset_count, occ_count(datasetKey = "j"))
}
#each element in fct gets a new dataframe that is then pasted onto df
#newdf <- combo[combo$taxon == j, c('kingdom_matrix._c2','kingdom_matrix.increase')]
#for (k in colnames(newdf)){
#   df_kingdom[,paste(k,j, sep="")]<-newdf[,k]
#}
}
dataset_count
warnings()
for (j in combo$key){
if (combo$key == ""){
#append(dataset_count, "")
print("nothing")
}else{
append(dataset_count, occ_count(datasetKey = "j"))
}
#each element in fct gets a new dataframe that is then pasted onto df
#newdf <- combo[combo$taxon == j, c('kingdom_matrix._c2','kingdom_matrix.increase')]
#for (k in colnames(newdf)){
#   df_kingdom[,paste(k,j, sep="")]<-newdf[,k]
#}
}
for (j in combo$key){
if (combo$key == ""){
append(dataset_count, "")
#print("nothing")
}else{
append(dataset_count, occ_count(datasetKey = "j"))
}
#each element in fct gets a new dataframe that is then pasted onto df
#newdf <- combo[combo$taxon == j, c('kingdom_matrix._c2','kingdom_matrix.increase')]
#for (k in colnames(newdf)){
#   df_kingdom[,paste(k,j, sep="")]<-newdf[,k]
#}
}
vec <- vector()
apppend(vec, 23)
append(vec, 23)
vec
vec <- c(vec, 23)
vec
count_vec <- vector()
#df_kingdom <- data.frame(iso_country$iso_code)
count_vec <- vector()
df <- data.frame(count=integer())
for (j in combo$key){
if (combo$key == ""){
count_vec <- c(count_vec, "")
#print("nothing")
}else{
count_vec <- c(count_vec, occ_count(datasetKey = "j"))
}
#each element in fct gets a new dataframe that is then pasted onto df
#newdf <- combo[combo$taxon == j, c('kingdom_matrix._c2','kingdom_matrix.increase')]
#for (k in colnames(newdf)){
#   df_kingdom[,paste(k,j, sep="")]<-newdf[,k]
#}
}
count_vec
warnings()
count_vec <- vector()
df <- data.frame(count=integer())
for (j in combo$key){
if (j == ""){
count_vec <- c(count_vec, "")
#print("nothing")
}else{
count_vec <- c(count_vec, occ_count(datasetKey = "j"))
}
#each element in fct gets a new dataframe that is then pasted onto df
#newdf <- combo[combo$taxon == j, c('kingdom_matrix._c2','kingdom_matrix.increase')]
#for (k in colnames(newdf)){
#   df_kingdom[,paste(k,j, sep="")]<-newdf[,k]
#}
}
count_vec <- vector()
df <- data.frame(count=integer())
for (j in combo$key){
if (j == ""){
count_vec <- c(count_vec, "")
print("nothing")
}else{
count_vec <- c(count_vec, occ_count(datasetKey = "j"))
}
#each element in fct gets a new dataframe that is then pasted onto df
#newdf <- combo[combo$taxon == j, c('kingdom_matrix._c2','kingdom_matrix.increase')]
#for (k in colnames(newdf)){
#   df_kingdom[,paste(k,j, sep="")]<-newdf[,k]
#}
}
#df_kingdom <- data.frame(iso_country$iso_code)
count_vec <- vector()
df <- data.frame(count=integer())
for (j in combo$key){
if (j == ""){
count_vec <- c(count_vec, "")
print("nothing")
}else{
print(j)
count_vec <- c(count_vec, occ_count(datasetKey = "j"))
}
#each element in fct gets a new dataframe that is then pasted onto df
#newdf <- combo[combo$taxon == j, c('kingdom_matrix._c2','kingdom_matrix.increase')]
#for (k in colnames(newdf)){
#   df_kingdom[,paste(k,j, sep="")]<-newdf[,k]
#}
}
occ_count(datasetkey = "f53166cd-21d1-404a-97bc-f26bc2ce875a")
occ_count(datasetKey = "f53166cd-21d1-404a-97bc-f26bc2ce875a")
count_vec <- vector()
df <- data.frame(count=integer())
for (j in combo$key){
if (j == ""){
count_vec <- c(count_vec, "")
print("nothing")
}else{
print(j)
count_vec <- c(count_vec, occ_count(datasetKey = j))
}
#each element in fct gets a new dataframe that is then pasted onto df
#newdf <- combo[combo$taxon == j, c('kingdom_matrix._c2','kingdom_matrix.increase')]
#for (k in colnames(newdf)){
#   df_kingdom[,paste(k,j, sep="")]<-newdf[,k]
#}
}
count_vec
combo$count <- count_vec
head(combo)
head(combo,12)
head(combo,20)
